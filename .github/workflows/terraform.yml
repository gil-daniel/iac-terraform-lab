# Terraform CI Workflow for GitHub Actions
# ----------------------------------------
# This workflow:
# - Authenticates with Azure using a Service Principal JSON (creds)
# - Generates backend.tf with explicit subscription & tenant
# - Formats, validates, and plans Terraform infrastructure
# - Applies changes manually via workflow_dispatch

name: Terraform CI

on:
  push:
    branches:
      - '**'
  pull_request:
  workflow_dispatch:

concurrency:
  group: terraform-${{ github.ref }}
  cancel-in-progress: true

jobs:
  plan:
    name: Terraform Plan
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout repository code
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Authenticate with Azure using SP JSON
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # 3. Install Terraform CLI
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2

      # 4. Format Terraform files
      - name: Terraform fmt
        run: terraform fmt -recursive

      # 5. Dynamically generate backend.tf with subscription & tenant
      - name: Generate backend.tf
        run: |
          cat > backend.tf <<EOF
          terraform {
            backend "azurerm" {
              subscription_id      = "${{ secrets.SUBSCRIPTION_ID }}"
              tenant_id            = "${{ secrets.AZURE_TENANT_ID }}"
              resource_group_name  = "${{ secrets.RESOURCE_GROUP_NAME }}"
              storage_account_name = "${{ secrets.STORAGE_ACCOUNT_NAME }}"
              container_name       = "tfstate"
              key                  = "terraform.tfstate"
            }
          }
          EOF

      # 6. Initialize backend and modules
      - name: Terraform init
        run: terraform init

      # 7. Validate Terraform configuration
      - name: Terraform validate
        run: terraform validate

      # 8. Generate execution plan
      - name: Terraform plan
        run: |
          terraform plan \
            -lock=false \
            -input=false \
            -var="subscription_id=${{ secrets.SUBSCRIPTION_ID }}" \
            -var="resource_group_name=${{ secrets.RESOURCE_GROUP_NAME }}" \
            -var="admin_username=${{ secrets.ADMIN_USERNAME }}" \
            -var="ssh_public_key_content=${{ secrets.SSH_PUBLIC_KEY_CONTENT }}" \
            -out=tfplan

      # 9. Upload plan artifact
      - name: Upload plan artifact
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: tfplan

  apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: plan
    if: ${{ github.event_name == 'workflow_dispatch' }}

    steps:
      # 1. Checkout repository code
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Download the plan artifact
      - name: Download plan artifact
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan
          path: .

      # 3. Authenticate with Azure using SP JSON
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # 4. Install Terraform CLI
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2

      # 5. Regenerate backend.tf
      - name: Generate backend.tf
        run: |
          cat > backend.tf <<EOF
          terraform {
            backend "azurerm" {
              subscription_id      = "${{ secrets.SUBSCRIPTION_ID }}"
              tenant_id            = "${{ secrets.AZURE_TENANT_ID }}"
              resource_group_name  = "${{ secrets.RESOURCE_GROUP_NAME }}"
              storage_account_name = "${{ secrets.STORAGE_ACCOUNT_NAME }}"
              container_name       = "tfstate"
              key                  = "terraform.tfstate"
            }
          }
          EOF

      # 6. Initialize backend and modules
      - name: Terraform init
        run: terraform init

      # 7. Apply the previously generated plan
      - name: Terraform apply
        run: terraform apply -auto-approve tfplan
