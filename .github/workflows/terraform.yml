# Terraform CI Workflow for GitHub Actions
# ----------------------------------------
# This workflow:
# - Authenticates securely with Azure using a Service Principal stored as a GitHub secret
# - Dynamically generates backend.tf using GitHub Secrets
# - Formats, validates, and plans Terraform infrastructure
# - Allows manual approval to apply changes via workflow_dispatch
#
# ⚠️ Security Note:
# The backend.tf file is generated at runtime and never stored in the repository.
# The runner is ephemeral and destroyed after the job completes.
# Variable values are injected securely via GitHub Secrets.

name: Terraform CI

on:
  push:
    branches:
      - '**'
  pull_request:
  workflow_dispatch:

# Prevents concurrent runs on the same branch
concurrency:
  group: terraform-${{ github.ref }}
  cancel-in-progress: true

jobs:
  plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'workflow_dispatch' || github.event_name == 'workflow_dispatch' }}

    steps:
      # Checkout repository code
      - name: 📥 Checkout code
        uses: actions/checkout@v3

      # Authenticate with Azure using Service Principal
      - name: 🔐 Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Install Terraform CLI
      - name: ⚙️ Set up Terraform
        uses: hashicorp/setup-terraform@v2

      # Format Terraform files
      - name: 🧾 Terraform Format
        run: terraform fmt -recursive

      # Dynamically generate backend.tf using GitHub Secrets
      - name: 🛠️ Generate backend.tf
        run: |
          cat > backend.tf <<EOF
          terraform {
            backend "azurerm" {
              resource_group_name  = "${{ secrets.RESOURCE_GROUP_NAME }}"
              storage_account_name = "${{ secrets.STORAGE_ACCOUNT_NAME }}"
              container_name       = "tfstate"
              key                  = "terraform.tfstate"
            }
          }
          EOF

      # Initialize Terraform backend and modules
      - name: 🚀 Terraform Init
        run: terraform init

      # Validate Terraform configuration
      - name: ✅ Terraform Validate
        run: terraform validate

      # Generate execution plan using sensitive variables from secrets
      - name: 📐 Terraform Plan
        run: |
          terraform plan \
          -lock=false \
          -input=false \
          -var="resource_group_name=${{ secrets.RESOURCE_GROUP_NAME }}" \
          -var="admin_username=${{ secrets.ADMIN_USERNAME }}" \
          -var="ssh_public_key_content=${{ secrets.SSH_PUBLIC_KEY_CONTENT }}" \
          -out=tfplan

      # Upload plan artifact for later use
      - name: 📦 Upload Plan Artifact
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: tfplan

  apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: plan
    if: ${{ github.event_name == 'workflow_dispatch' }}

    steps:
      # Checkout repository code
      - name: 📥 Checkout code
        uses: actions/checkout@v3

      # Download previously generated plan artifact
      - name: 📦 Download Plan Artifact
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan
          path: .

      # Authenticate with Azure using Service Principal
      - name: 🔐 Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          subscription-id: ${{ secrets.SUBSCRIPTION_ID }}

      # Install Terraform CLI
      - name: ⚙️ Set up Terraform
        uses: hashicorp/setup-terraform@v2

      # Regenerate backend.tf to match plan context
      - name: 🛠️ Generate backend.tf
        run: |
          cat > backend.tf <<EOF
          terraform {
            backend "azurerm" {
              resource_group_name  = "${{ secrets.RESOURCE_GROUP_NAME }}"
              storage_account_name = "${{ secrets.STORAGE_ACCOUNT_NAME }}"
              container_name       = "tfstate"
              key                  = "terraform.tfstate"
            }
          }
          EOF

      # Initialize Terraform backend
      - name: 🚀 Terraform Init
        run: terraform init

      # Apply the previously generated plan
      - name: ✅ Terraform Apply
        run: terraform apply -auto-approve tfplan
